const vertexShader="\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    ",fragmentShader="\n      precision highp float;\n      uniform float offset, darkness, overlayAmount, noiseAmount, time, introTime;\n      uniform sampler2D tDiffuse, tOverlay;\n      varying vec2 vUv;\n\n      float random2d(vec2 st) {\n        return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n      }\n\n      void main() {\n        vec3 orig = texture2D(tDiffuse, vUv).rgb;\n        vec3 over = texture2D(tOverlay, vUv).rgb;\n        vec3 color = vec3(0.149, 0.274, 0.364);\n        vec2 uv = (vUv - vec2(0.5)) * vec2(offset);\n        vec3 col = mix(orig, vec3(1.0 - darkness, color), dot(uv, uv));\n        col = mix(col, col * over, overlayAmount);\n\n        float baseNoise = random2d(gl_FragCoord.xy + mod(time, 1000.0));\n        float sweepSpeed = 0.4;\n        float sweepWidth = 0.1;\n        float sweepPos = mod(time * sweepSpeed, 2.0);\n        float dist = abs(vUv.y - sweepPos);\n        float sweepMask = smoothstep(sweepWidth, 4.0, dist);\n        float sweepNoise = random2d(vec2(gl_FragCoord.x * 5.0, gl_FragCoord.y + time * 50.0));\n\n        col += (sweepNoise - 0.5) * noiseAmount * 1.2 * sweepMask;\n        col += (baseNoise - 0.8) * noiseAmount * 0.4;\n        col = mix(orig, col, introTime);\n        gl_FragColor = vec4(col, 1.0);\n      }\n    ",scene=new THREE.Scene,camera=new THREE.OrthographicCamera(-1,1,1,-1,0,1),geometry=new THREE.PlaneGeometry(2,2),baseTexture=new THREE.DataTexture(new Uint8Array([0,90,156,255]),1,1,THREE.RGBAFormat);baseTexture.needsUpdate=!0;const overlayTexturePlaceholder=new THREE.DataTexture(new Uint8Array([255,255,255,255]),1,1,THREE.RGBAFormat);overlayTexturePlaceholder.needsUpdate=!0;const uniforms={offset:{value:1},darkness:{value:1},overlayAmount:{value:.38},noiseAmount:{value:.1},time:{value:0},introTime:{value:1},tDiffuse:{value:baseTexture},tOverlay:{value:overlayTexturePlaceholder}},material=new THREE.ShaderMaterial({vertexShader:vertexShader,fragmentShader:fragmentShader,uniforms:uniforms}),mesh=new THREE.Mesh(geometry,material);scene.add(mesh);const renderer=new THREE.WebGLRenderer({antialias:!0});function animate(e){uniforms.time.value=.001*e,renderer.render(scene,camera),requestAnimationFrame(animate)}renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(renderer.domElement),animate(),window.addEventListener("resize",(()=>{renderer.setSize(window.innerWidth,window.innerHeight)}));const overlayUrl="https://michaelseh.com/overlay.jpg",image=new Image;image.crossOrigin="anonymous",image.onload=()=>{const e=new THREE.Texture(image);e.minFilter=THREE.LinearFilter,e.magFilter=THREE.LinearFilter,e.wrapS=THREE.RepeatWrapping,e.wrapT=THREE.RepeatWrapping,e.needsUpdate=!0,uniforms.tOverlay.value=e},image.src=overlayUrl;